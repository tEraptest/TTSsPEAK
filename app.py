import tkinter as tk
from tkinter import filedialog, ttk, scrolledtext, messagebox
from PIL import Image, ImageTk
import fitz
import sounddevice as sd
import numpy as np
import threading
import time
import os
import shutil
import tempfile
from pathlib import Path
from typing import Optional, List, Tuple, Any

from constants import *
import audio_utils
import text_utils
import ffmpeg_utils
from tts_utils import TTSManager

class PdfReaderApp:
    def __init__(self, root_window: tk.Tk):
        self.root = root_window
        self.root.title("PDF Reader & Speaker (–†—É—Å—Å–∫–∏–π TTS)")
        self.root.geometry("1000x750")

        self.tts_manager = TTSManager(language=DEFAULT_LANGUAGE,
                                      model_id=DEFAULT_MODEL_ID,
                                      sample_rate=DEFAULT_SAMPLE_RATE,
                                      device_type=DEFAULT_DEVICE_TYPE)
        self.voices = DEFAULT_VOICES

        self.pdf_document: Optional[fitz.Document] = None
        self.pdf_path: Optional[Path] = None
        self.current_page_num: int = 0
        self.total_pages: int = 0

        self.playing_thread: Optional[threading.Thread] = None
        self.stop_playback_flag = threading.Event()
        self.speech_speed: float = 1.0
        self.temp_audio_files: List[Path] = []
        self.current_temp_dir: Optional[Path] = None
        self.playback_was_stopped: bool = False

        self.btn_load: Optional[ttk.Button] = None
        self.entry_start_page: Optional[ttk.Entry] = None
        self.entry_end_page: Optional[ttk.Entry] = None
        self.btn_play: Optional[ttk.Button] = None
        self.btn_stop: Optional[ttk.Button] = None
        self.btn_save_mp3: Optional[ttk.Button] = None
        self.btn_save_stopped_mp3: Optional[ttk.Button] = None
        self.btn_prev: Optional[ttk.Button] = None
        self.lbl_page_display: Optional[ttk.Label] = None
        self.btn_next: Optional[ttk.Button] = None
        self.speed_slider: Optional[ttk.Scale] = None
        self.speed_label: Optional[ttk.Label] = None
        self.voice_combobox: Optional[ttk.Combobox] = None
        self.pdf_image_label: Optional[ttk.Label] = None
        self.text_display: Optional[scrolledtext.ScrolledText] = None
        self.status_label: Optional[ttk.Label] = None

        self._create_widgets()
        self.update_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

        threading.Thread(target=self._initial_tts_load_thread, daemon=True).start()

    def _initial_tts_load_thread(self):
        self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Silero TTS...")
        success, message = self.tts_manager.load_model()

        def _update_gui_after_load():
            if success:
                self.update_status(message)
                self.enable_controls()
            else:
                self.update_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TTS. –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                if self.root.winfo_exists():
                    try:
                        messagebox.showerror("–û—à–∏–±–∫–∞ TTS", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Silero TTS.\n{message}")
                    except tk.TclError:
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å messagebox (root —É–Ω–∏—á—Ç–æ–∂–µ–Ω?).")
            self.enable_controls()

        if self.root and self.root.winfo_exists():
            self.root.after(0, _update_gui_after_load)

    def _create_widgets(self):
        self._create_top_frame()
        self._create_display_pane()
        self._create_status_bar()

    def _create_top_frame(self):
        top_frame = ttk.Frame(self.root)
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)
        self._create_control_panel(top_frame)
        self._create_nav_speed_panel(top_frame)

    def _create_control_panel(self, parent_frame):
        control_frame = ttk.LabelFrame(parent_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding="10")
        control_frame.pack(side=tk.TOP, fill=tk.X)

        self.btn_load = ttk.Button(control_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF", command=self.select_pdf)
        self.btn_load.grid(row=0, column=0, padx=5, pady=5, sticky="w")

        lbl_start = ttk.Label(control_frame, text="–°:")
        lbl_start.grid(row=0, column=1, padx=(10, 0), pady=5, sticky="w")
        self.entry_start_page = ttk.Entry(control_frame, width=5, state=tk.DISABLED)
        self.entry_start_page.grid(row=0, column=2, padx=2, pady=5, sticky="w")

        lbl_end = ttk.Label(control_frame, text="–î–æ:")
        lbl_end.grid(row=0, column=3, padx=(10, 0), pady=5, sticky="w")
        self.entry_end_page = ttk.Entry(control_frame, width=5, state=tk.DISABLED)
        self.entry_end_page.grid(row=0, column=4, padx=2, pady=5, sticky="w")

        self.btn_play = ttk.Button(control_frame, text="‚ñ∂ –û–∑–≤—É—á–∏—Ç—å", command=self.play_range, state=tk.DISABLED)
        self.btn_play.grid(row=0, column=5, padx=5, pady=5, sticky="w")

        self.btn_stop = ttk.Button(control_frame, text="‚èπ –°—Ç–æ–ø", command=self.stop_audio, state=tk.DISABLED)
        self.btn_stop.grid(row=0, column=6, padx=5, pady=5, sticky="w")

        save_frame = ttk.Frame(control_frame)
        save_frame.grid(row=1, column=0, columnspan=7, sticky="ew", pady=5)

        self.btn_save_mp3 = ttk.Button(save_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å MP3 (–ø–æ–ª–Ω–æ–µ)", command=self.save_full_audio_to_mp3, state=tk.DISABLED)
        self.btn_save_mp3.pack(side=tk.LEFT, padx=5, expand=True, fill=tk.X)

        self.btn_save_stopped_mp3 = ttk.Button(save_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å MP3 (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ)", command=self.save_stopped_audio_to_mp3, state=tk.DISABLED)
        self.btn_save_stopped_mp3.pack(side=tk.LEFT, padx=5, expand=True, fill=tk.X)

        control_frame.columnconfigure(0, weight=1)

    def _create_nav_speed_panel(self, parent_frame):
        nav_speed_frame = ttk.LabelFrame(parent_frame, text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        nav_speed_frame.pack(side=tk.TOP, fill=tk.X, pady=5)

        self.btn_prev = ttk.Button(nav_speed_frame, text="< –ü—Ä–µ–¥.", command=self.prev_page, state=tk.DISABLED)
        self.btn_prev.grid(row=0, column=0, padx=5, pady=5)

        self.lbl_page_display = ttk.Label(nav_speed_frame, text="–°—Ç—Ä–∞–Ω–∏—Ü–∞: - / -", width=15, anchor="center")
        self.lbl_page_display.grid(row=0, column=1, padx=5, pady=5)

        self.btn_next = ttk.Button(nav_speed_frame, text="–°–ª–µ–¥. >", command=self.next_page, state=tk.DISABLED)
        self.btn_next.grid(row=0, column=2, padx=5, pady=5)

        nav_speed_frame.grid_columnconfigure(3, weight=1)

        lbl_speed = ttk.Label(nav_speed_frame, text="–°–∫–æ—Ä–æ—Å—Ç—å:")
        lbl_speed.grid(row=0, column=4, padx=(10, 0), pady=5, sticky="e")

        self.speed_slider = ttk.Scale(nav_speed_frame, from_=0.5, to=2.0, length=150, value=self.speech_speed, orient=tk.HORIZONTAL, command=self.update_speed)
        self.speed_slider.grid(row=0, column=5, padx=5, pady=5, sticky="ew")

        self.speed_label = ttk.Label(nav_speed_frame, text=f"{self.speech_speed:.1f}x", width=5)
        self.speed_label.grid(row=0, column=6, padx=(0, 5), pady=5)

        lbl_voice = ttk.Label(nav_speed_frame, text="–ì–æ–ª–æ—Å:")
        lbl_voice.grid(row=0, column=7, padx=(10, 0), pady=5, sticky="e")
        self.voice_combobox = ttk.Combobox(nav_speed_frame, values=self.voices, state="readonly", width=10)
        self.voice_combobox.grid(row=0, column=8, padx=5, pady=5, sticky="w")
        if self.voices:
            self.voice_combobox.set(self.voices[0])

        nav_speed_frame.grid_columnconfigure(5, weight=1)

    def _create_display_pane(self):
        display_pane = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        display_pane.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=10, pady=(0, 5))

        pdf_frame = ttk.Frame(display_pane, width=500, height=600)
        pdf_frame.pack_propagate(False)
        self.pdf_image_label = ttk.Label(pdf_frame, anchor=tk.CENTER, background="gray")
        self.pdf_image_label.pack(fill=tk.BOTH, expand=True)
        display_pane.add(pdf_frame, weight=2)

        text_frame = ttk.Frame(display_pane, width=400, height=600)
        text_frame.pack_propagate(False)
        text_container = ttk.Frame(text_frame)
        text_container.pack(fill=tk.BOTH, expand=True)
        self.text_display = scrolledtext.ScrolledText(text_container, wrap=tk.WORD, state=tk.DISABLED, height=10, relief=tk.FLAT, bd=0)
        self.text_display.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
        self.text_display.tag_configure("highlight", background=HIGHLIGHT_BG, foreground=HIGHLIGHT_FG)
        display_pane.add(text_frame, weight=1)

    def _create_status_bar(self):
        self.status_label = ttk.Label(self.root, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª...", relief=tk.SUNKEN, anchor=tk.W, padding="2 5")
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)

    def update_speed(self, value: str):
        try:
            self.speech_speed = round(float(value), 1)
            if self.speed_label:
                self.speed_label.config(text=f"{self.speech_speed:.1f}x")
        except ValueError:
            pass

    def enable_controls(self, playback_running: bool = False):
        if not self.root or not self.root.winfo_exists():
            return

        is_ready_for_action = self.tts_manager.is_ready and self.pdf_document is not None

        normal_state = tk.NORMAL
        disabled_state = tk.DISABLED

        play_state = disabled_state if playback_running else (normal_state if is_ready_for_action else disabled_state)
        stop_state = normal_state if playback_running else disabled_state

        nav_range_state = disabled_state if playback_running else (normal_state if self.pdf_document is not None else disabled_state)

        load_state = disabled_state if playback_running else normal_state

        save_full_state = disabled_state if playback_running else (normal_state if is_ready_for_action else disabled_state)

        can_save_stopped = (is_ready_for_action and
                            not playback_running and
                            self.playback_was_stopped and
                            self.temp_audio_files)
        save_stopped_state = normal_state if can_save_stopped else disabled_state

        if self.btn_play: self.btn_play.config(state=play_state)
        if self.btn_stop: self.btn_stop.config(state=stop_state)
        if self.entry_start_page: self.entry_start_page.config(state=nav_range_state)
        if self.entry_end_page: self.entry_end_page.config(state=nav_range_state)
        if self.btn_prev: self.btn_prev.config(state=nav_range_state)
        if self.btn_next: self.btn_next.config(state=nav_range_state)
        if self.btn_load: self.btn_load.config(state=load_state)
        if self.btn_save_mp3: self.btn_save_mp3.config(state=save_full_state)
        if self.btn_save_stopped_mp3: self.btn_save_stopped_mp3.config(state=save_stopped_state)

        speed_voice_state = normal_state if self.tts_manager.is_ready else disabled_state
        if self.speed_slider: self.speed_slider.config(state=speed_voice_state)
        if self.voice_combobox: self.voice_combobox.config(state=speed_voice_state)

        if self.text_display: self.text_display.config(state=tk.DISABLED)

    def select_pdf(self):
        filepath_str = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª",
            filetypes=[("PDF Files", "*.pdf"), ("All Files", "*.*")]
        )
        if not filepath_str:
            return

        filepath = Path(filepath_str)
        self.stop_audio()
        self.cleanup_temp_files()

        try:
            if self.pdf_document:
                print("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ PDF...")
                self.pdf_document.close()
                self.pdf_document = None

            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ PDF: {filepath}")

            self.pdf_document = fitz.open(filepath, filetype="pdf")
            self.pdf_path = filepath
            self.total_pages = len(self.pdf_document)
            self.current_page_num = 0

            self.update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω: {filepath.name}, –°—Ç—Ä–∞–Ω–∏—Ü: {self.total_pages}")

            if self.entry_start_page:
                self.entry_start_page.config(state=tk.NORMAL)
                self.entry_start_page.delete(0, tk.END)
                self.entry_start_page.insert(0, "1")
            if self.entry_end_page:
                self.entry_end_page.config(state=tk.NORMAL)
                self.entry_end_page.delete(0, tk.END)
                self.entry_end_page.insert(0, str(self.total_pages))

            self.show_page(self.current_page_num)
            self.enable_controls()

        except fitz.fitz.FileNotFoundError:
             error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}"
             print(error_msg)
             messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF", error_msg)
             self.reset_pdf_state()
        except fitz.fitz.FileDataError as e:
             error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ PDF):\n{filepath}\n\n–û—à–∏–±–∫–∞: {e}"
             print(error_msg)
             messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF", error_msg)
             self.reset_pdf_state()
        except Exception as e:
            error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ PDF:\n{filepath}\n\n–û—à–∏–±–∫–∞: {e}"
            print(error_msg)

            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF", error_msg)
            self.reset_pdf_state()

    def reset_pdf_state(self):
         if self.pdf_document:
             try:
                 self.pdf_document.close()
             except Exception as e:
                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ PDF –≤ reset_pdf_state: {e}")
         self.pdf_document = None
         self.pdf_path = None
         self.total_pages = 0
         self.current_page_num = -1
         self.update_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF –∏–ª–∏ PDF –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
         self.clear_display()
         self.enable_controls()

    def clear_display(self):
        if self.pdf_image_label:
            self.pdf_image_label.config(image='')
            self.pdf_image_label.image = None
        if self.text_display:
            try:
                self.text_display.config(state=tk.NORMAL)
                self.text_display.delete('1.0', tk.END)
                self.text_display.config(state=tk.DISABLED)
            except tk.TclError as e:
                 print(f"–û—à–∏–±–∫–∞ Tkinter –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è: {e}")
        if self.lbl_page_display:
            self.lbl_page_display.config(text="–°—Ç—Ä–∞–Ω–∏—Ü–∞: - / -")

    def show_page(self, page_index: int):
        if not self.pdf_document or not (0 <= page_index < self.total_pages):
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_index+1} / {self.total_pages}")
            return

        self.current_page_num = page_index
        self.update_page_label()

        try:
            page = self.pdf_document.load_page(page_index)
            zoom = 1.0
            mat = fitz.Matrix(zoom, zoom)
            pix = page.get_pixmap(matrix=mat, alpha=False)
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

            def _update_image_in_gui():
                if not self.pdf_image_label or not self.pdf_image_label.winfo_exists(): return
                img_tk = ImageTk.PhotoImage(img)
                self.pdf_image_label.config(image=img_tk)
                self.pdf_image_label.image = img_tk

            self.root.after(0, _update_image_in_gui)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_index + 1}: {e}")
            def _clear_image_in_gui():
                 if not self.pdf_image_label or not self.pdf_image_label.winfo_exists(): return
                 self.pdf_image_label.config(image='')
                 self.pdf_image_label.image = None
            self.root.after(0, _clear_image_in_gui)
            self.update_status(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_index + 1}")

        try:
            text = page.get_text("text", sort=True).strip()

            def _update_text_in_gui():
                if not self.text_display or not self.text_display.winfo_exists(): return
                try:
                    self.text_display.config(state=tk.NORMAL)
                    self.text_display.delete('1.0', tk.END)
                    if text:
                        self.text_display.insert('1.0', text)
                    else:
                        self.text_display.insert('1.0', f"[–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞]")
                    self.text_display.config(state=tk.DISABLED)
                    self.text_display.see("1.0")
                    self.text_display.tag_remove("highlight", "1.0", tk.END)
                except tk.TclError as e_tk:
                    print(f"–û—à–∏–±–∫–∞ Tkinter –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e_tk}")
                except Exception as e_upd:
                     print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e_upd}")

            self.root.after(0, _update_text_in_gui)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_index + 1}: {e}")
            def _update_text_error_in_gui():
                 if not self.text_display or not self.text_display.winfo_exists(): return
                 try:
                    self.text_display.config(state=tk.NORMAL)
                    self.text_display.delete('1.0', tk.END)
                    self.text_display.insert('1.0', f"[–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä. {page_index + 1}]")
                    self.text_display.config(state=tk.DISABLED)
                 except tk.TclError as e_tk:
                      print(f"–û—à–∏–±–∫–∞ Tkinter –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ (–æ—à–∏–±–∫–∞): {e_tk}")
            self.root.after(0, _update_text_error_in_gui)

        page = None

    def update_page_label(self):
        if self.lbl_page_display and self.lbl_page_display.winfo_exists():
            if self.pdf_document and self.total_pages > 0:
                txt = f"–°—Ç—Ä: {self.current_page_num + 1} / {self.total_pages}"
            else:
                txt = "–°—Ç—Ä: - / -"
            self.lbl_page_display.config(text=txt)

    def prev_page(self):
        if self.pdf_document and self.current_page_num > 0:
            self.show_page(self.current_page_num - 1)

    def next_page(self):
        if self.pdf_document and self.current_page_num < self.total_pages - 1:
            self.show_page(self.current_page_num + 1)

    def _validate_page_range(self) -> Optional[Tuple[int, int]]:
        if not self.pdf_document:
             messagebox.showwarning("–ù–µ—Ç PDF", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª.")
             return None
        if not self.entry_start_page or not self.entry_end_page:
             messagebox.showerror("–û—à–∏–±–∫–∞ GUI", "–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
             return None

        try:
            start_page_one_based = int(self.entry_start_page.get())
            end_page_one_based = int(self.entry_end_page.get())

            start_page_idx = start_page_one_based - 1
            end_page_idx = end_page_one_based - 1

            if not (0 <= start_page_idx < self.total_pages):
                raise ValueError(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ '{start_page_one_based}' –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1-{self.total_pages}).")
            if not (0 <= end_page_idx < self.total_pages):
                 raise ValueError(f"–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ '{end_page_one_based}' –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1-{self.total_pages}).")
            if start_page_idx > end_page_idx:
                raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")

            return start_page_idx, end_page_idx

        except ValueError as ve:
            messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü.\n{ve}")
            return None
        except Exception as e:
             messagebox.showerror("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ –ø–æ–ª—è—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
             return None

    def play_range(self):
        if not self.tts_manager.is_ready:
            messagebox.showerror("TTS –Ω–µ –≥–æ—Ç–æ–≤", "–ú–æ–¥–µ–ª—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞.")
            return
        if self.playing_thread and self.playing_thread.is_alive():
            messagebox.showinfo("–ó–∞–Ω—è—Ç–æ", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ.")
            return

        page_range = self._validate_page_range()
        if page_range is None:
            return

        start_page_idx, end_page_idx = page_range

        self.stop_playback_flag.clear()
        self.playback_was_stopped = False
        self.cleanup_temp_files()
        self.temp_audio_files = []

        try:
            self.current_temp_dir = Path(tempfile.mkdtemp(prefix=TEMP_DIR_PREFIX + "play_"))
            print(f"–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {self.current_temp_dir}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}")
            return

        selected_voice = self.voice_combobox.get() if self.voice_combobox else self.voices[0]

        thread_args = (start_page_idx, end_page_idx, selected_voice, self.current_temp_dir)
        self.playing_thread = threading.Thread(target=self._play_audio_thread, args=thread_args, daemon=True)

        self.enable_controls(playback_running=True)
        self.update_status(f"–ó–∞–ø—É—Å–∫ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü {start_page_idx + 1}-{end_page_idx + 1}...")
        self.playing_thread.start()

    def _play_audio_thread(self, start_page_idx: int, end_page_idx: int, voice: str, temp_dir: Path):
        print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –ù–∞—á–∞–ª–æ –¥–ª—è —Å—Ç—Ä {start_page_idx + 1}-{end_page_idx + 1}, –ì–æ–ª–æ—Å: '{voice}', –ü–∞–ø–∫–∞: {temp_dir}")
        playback_successful = True

        try:
            for page_num in range(start_page_idx, end_page_idx + 1):
                if self.stop_playback_flag.is_set():
                    print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π {page_num + 1}.")
                    playback_successful = False
                    break
                if not self.pdf_document:
                    print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç –ø–µ—Ä–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π {page_num + 1}.")
                    playback_successful = False
                    break

                self.root.after(0, lambda p=page_num: self.show_page(p))
                self.root.after(0, self.update_status, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1} / {self.total_pages}...")
                time.sleep(0.05)
                if self.stop_playback_flag.is_set():
                    print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI –¥–ª—è —Å—Ç—Ä {page_num + 1}.")
                    playback_successful = False
                    break

                page_text: Optional[str] = None
                try:
                    page = self.pdf_document.load_page(page_num)
                    try:
                        page_text = page.get_text("text", sort=True).strip()
                    finally:
                        page = None
                except Exception as e:
                    print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä {page_num + 1}: {e}")
                    self.root.after(0, self.update_status, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä {page_num + 1}. –ü—Ä–æ–ø—É—Å–∫.")
                    time.sleep(0.5)
                    continue

                if not page_text:
                    self.root.after(0, self.update_status, f"–°—Ç—Ä. {page_num + 1}: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è. –ü—Ä–æ–ø—É—Å–∫.")
                    time.sleep(0.2)
                    continue

                text_chunks = text_utils.split_text_into_chunks(page_text)
                num_chunks = len(text_chunks)
                print(f"–°—Ç—Ä. {page_num + 1}: {num_chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç(–æ–≤) —Ç–µ–∫—Å—Ç–∞.")

                for i, chunk in enumerate(text_chunks):
                    if self.stop_playback_flag.is_set():
                        print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º {i+1} —Å—Ç—Ä {page_num + 1}.")
                        playback_successful = False
                        break
                    if not self.pdf_document:
                        print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: PDF –∑–∞–∫—Ä—ã—Ç –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º {i+1} —Å—Ç—Ä {page_num + 1}.")
                        playback_successful = False
                        break

                    self.root.after(0, self.update_status, f"–°—Ç—Ä. {page_num + 1}: –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1}/{num_chunks}...")
                    self.root.after(0, lambda ft=page_text, c=chunk: self.highlight_text(ft, c))

                    audio_np = self.tts_manager.generate_chunk(chunk, voice, self.speech_speed)

                    if audio_np is not None and audio_np.size > 0:
                        temp_wav_path = temp_dir / f"chunk_{page_num:04d}_{i:04d}.wav"
                        try:
                            audio_utils.save_audio_to_wav(temp_wav_path, audio_np, self.tts_manager.sample_rate)
                            self.temp_audio_files.append(temp_wav_path)
                        except Exception as write_e:
                            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ WAV —Ñ–∞–π–ª–∞ {temp_wav_path}: {write_e}")

                        play_success = self._play_audio_chunk_sync(audio_np)
                        if not play_success:
                            self.root.after(0, self.update_status, f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä. {page_num + 1}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                            self.stop_playback_flag.set()
                            playback_successful = False
                            break

                    elif audio_np is None:
                         self.root.after(0, self.update_status, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS –Ω–∞ —Å—Ç—Ä. {page_num + 1}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                         print(f"–û—à–∏–±–∫–∞ TTS –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: '{chunk[:60]}...'")
                         self.stop_playback_flag.set()
                         playback_successful = False
                         break

                    if self.stop_playback_flag.is_set():
                        print(f"–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1} —Å—Ç—Ä {page_num + 1}.")
                        playback_successful = False
                        break

                if not playback_successful:
                    break

        except Exception as e:
             print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
             import traceback
             traceback.print_exc()
             self.root.after(0, self.update_status, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
             playback_successful = False
             self.stop_playback_flag.set()

        finally:
            print("–ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏: –ë–ª–æ–∫ finally –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
            sd.stop()
            self.root.after(0, self.on_playback_finished, playback_successful)

    def _play_audio_chunk_sync(self, audio_np: Optional[np.ndarray]) -> bool:
        if audio_np is None or audio_np.size == 0:
            print("–ù–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
            return False

        try:
            sd.play(audio_np, self.tts_manager.sample_rate)
            start_time = time.monotonic()
            duration = len(audio_np) / self.tts_manager.sample_rate
            while time.monotonic() - start_time < duration:
                if self.stop_playback_flag.is_set():
                    sd.stop()
                    print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
                    return False
                time.sleep(0.02)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            sd.stop()
            return False

    def stop_audio(self):
        if self.playing_thread and self.playing_thread.is_alive():
            print("–°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
            self.playback_was_stopped = True
            self.stop_playback_flag.set()
            sd.stop()
            self.update_status("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        else:
            sd.stop()

    def on_playback_finished(self, completed_normally: bool):
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ: {completed_normally}, –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–æ–π: {self.playback_was_stopped}")

        self.playing_thread = None

        if completed_normally and not self.playback_was_stopped:
            self.update_status("–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            self.cleanup_temp_files()
            self.playback_was_stopped = False
        elif self.playback_was_stopped:
            self.update_status("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è MP3.")
        else:
            current_status = self.status_label.cget("text") if self.status_label else ""
            if "–û—à–∏–±–∫–∞" not in current_status and "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" not in current_status:
                 self.update_status("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            self.cleanup_temp_files()
            self.playback_was_stopped = False

        self.enable_controls(playback_running=False)

    def cleanup_temp_files(self):
        files_to_clear = list(self.temp_audio_files)
        dir_to_clear = self.current_temp_dir

        if not files_to_clear and not dir_to_clear:
            return

        print(f"–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        cleaned_files_count = 0

        self.temp_audio_files.clear()
        self.current_temp_dir = None

        for f_path in files_to_clear:
            try:
                if f_path.exists():
                    f_path.unlink()
                    cleaned_files_count += 1
            except OSError as e_clean:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {f_path}: {e_clean}")

        print(f"–£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleaned_files_count}.")

        if dir_to_clear:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏: {dir_to_clear}")
            try:
                if dir_to_clear.exists() and dir_to_clear.is_dir():
                    shutil.rmtree(dir_to_clear, ignore_errors=True)
                    print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {dir_to_clear}")
            except Exception as e_rmdir:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É {dir_to_clear}: {e_rmdir}")

        self.root.after(0, self.enable_controls, False)

    def highlight_text(self, full_page_text: str, current_chunk: str):
        if not self.text_display or not self.text_display.winfo_exists():
            return

        try:
            self.text_display.config(state=tk.NORMAL)

            self.text_display.tag_remove("highlight", "1.0", tk.END)

            start_index = -1
            try:
                start_index = full_page_text.index(current_chunk)
            except ValueError:
                 print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –Ω–∞–π—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏: '{current_chunk[:30]}...'")

            if start_index != -1:
                end_index = start_index + len(current_chunk)
                start_tk_idx = f"1.0 + {start_index} chars"
                end_tk_idx = f"1.0 + {end_index} chars"

                self.text_display.tag_add("highlight", start_tk_idx, end_tk_idx)
                self.text_display.see(start_tk_idx)

        except tk.TclError as e:
            print(f"–û—à–∏–±–∫–∞ Tkinter –ø—Ä–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        except Exception as e_highlight:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e_highlight}")
        finally:
             if self.text_display and self.text_display.winfo_exists():
                 try:
                      self.text_display.config(state=tk.DISABLED)
                 except tk.TclError:
                      pass

    def save_full_audio_to_mp3(self):
        if not self.tts_manager.is_ready:
            messagebox.showerror("TTS –Ω–µ –≥–æ—Ç–æ–≤", "–ú–æ–¥–µ–ª—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞.")
            return

        page_range = self._validate_page_range()
        if page_range is None:
            return

        start_page_idx, end_page_idx = page_range

        default_filename = f"{self.pdf_path.stem}_pages_{start_page_idx+1}-{end_page_idx+1}.mp3" if self.pdf_path else "output.mp3"
        output_path_str = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ü–û–õ–ù–´–ô MP3 —Ñ–∞–π–ª",
            defaultextension=".mp3",
            filetypes=[("MP3 Files", "*.mp3"), ("All Files", "*.*")],
            initialfile=default_filename
        )
        if not output_path_str:
            return

        output_path = Path(output_path_str)
        selected_voice = self.voice_combobox.get() if self.voice_combobox else self.voices[0]

        self.enable_controls(playback_running=True)
        self.update_status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ MP3... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
        self.root.update_idletasks()

        save_thread = threading.Thread(
            target=self._run_full_save_mp3_thread,
            args=(output_path, start_page_idx, end_page_idx, selected_voice),
            daemon=True
        )
        save_thread.start()

    def _run_full_save_mp3_thread(self, output_path: Path, start_page_idx: int, end_page_idx: int, voice: str):
        print(f"–ü–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–π): –ù–∞—á–∞–ª–æ —Å—Ç—Ä {start_page_idx + 1}-{end_page_idx + 1}, –ì–æ–ª–æ—Å: '{voice}', –§–∞–π–ª: {output_path}")
        temp_dir_save: Optional[Path] = None
        temp_wav_files_save: List[Path] = []
        generation_successful = True
        pdf_doc_local: Optional[fitz.Document] = None

        try:
            if not self.pdf_path or not self.pdf_path.exists():
                 raise ValueError("–ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            pdf_doc_local = fitz.open(self.pdf_path, filetype="pdf")
            if len(pdf_doc_local) != self.total_pages:
                 print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–º PDF –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.")
                 end_page_idx = min(end_page_idx, len(pdf_doc_local) - 1)
                 self.total_pages = len(pdf_doc_local)

            temp_dir_save = Path(tempfile.mkdtemp(prefix=TEMP_DIR_PREFIX + "fullsave_"))
            print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {temp_dir_save}")

            total_pages_in_range = end_page_idx - start_page_idx + 1
            for i, page_num in enumerate(range(start_page_idx, end_page_idx + 1)):
                current_page_display = page_num + 1
                progress_percent = int(((i + 1) / total_pages_in_range) * 100) if total_pages_in_range > 0 else 100
                self.root.after(0, self.update_status, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è MP3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä {current_page_display}/{self.total_pages} ({progress_percent}%)...")

                page_text_save: Optional[str] = None
                try:
                    page = pdf_doc_local.load_page(page_num)
                    try:
                        page_text_save = page.get_text("text", sort=True).strip()
                    finally:
                        page = None
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä {current_page_display} –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}. –ü—Ä–æ–ø—É—Å–∫.")
                    continue

                if not page_text_save:
                    print(f"–°—Ç—Ä. {current_page_display} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
                    continue

                text_chunks_save = text_utils.split_text_into_chunks(page_text_save)
                for j, chunk in enumerate(text_chunks_save):
                    audio_np_save = self.tts_manager.generate_chunk(chunk, voice, speed_multiplier=1.0)

                    if audio_np_save is not None and audio_np_save.size > 0:
                        temp_wav_path = temp_dir_save / f"audio_{page_num:04d}_{j:04d}.wav"
                        try:
                            audio_utils.save_audio_to_wav(temp_wav_path, audio_np_save, self.tts_manager.sample_rate)
                            temp_wav_files_save.append(temp_wav_path)
                        except Exception as write_e:
                            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ WAV {temp_wav_path}: {write_e}")
                            generation_successful = False
                            break
                    elif audio_np_save is None:
                        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä. {current_page_display}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–º.")
                        generation_successful = False

                if not generation_successful and temp_wav_files_save:
                     print("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏ WAV.")
                     break

            ffmpeg_success, ffmpeg_error_msg = ffmpeg_utils.run_ffmpeg_concat(temp_wav_files_save, output_path, temp_dir_save)
            if not temp_wav_files_save:
                message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."
                print(message)
                self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", message)
                generation_successful = False
            elif generation_successful:
                self.root.after(0, self.update_status, "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3...")
                ffmpeg_success, ffmpeg_error_msg = ffmpeg_utils.run_ffmpeg_concat(temp_wav_files_save, output_path, temp_dir_save)
                if ffmpeg_success:
                    final_message = f"–§–∞–π–ª MP3 —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{output_path}"
                    self.root.after(0, messagebox.showinfo, "–£—Å–ø–µ—Ö", final_message)
                    self.root.after(0, self.update_status, "MP3 —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                else:
                    error_display = ffmpeg_error_msg or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ FFmpeg."
                    self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞ FFmpeg", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ:\n{error_display}")
                    self.root.after(0, self.update_status, "–û—à–∏–±–∫–∞ FFmpeg –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
                    generation_successful = False
            else:
                 self.root.after(0, self.update_status, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–∞—Å—å. MP3 –Ω–µ —Å–æ–∑–¥–∞–Ω.")

        except Exception as e_save:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e_save}")
            import traceback
            traceback.print_exc()
            self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{e_save}")
            self.root.after(0, self.update_status, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ MP3.")
            generation_successful = False
        finally:
            if pdf_doc_local:
                try:
                    pdf_doc_local.close()
                except Exception as e_close:
                     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PDF –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e_close}")

            if temp_dir_save and temp_dir_save.exists():
                print(f"–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {temp_dir_save}")
                try:
                    shutil.rmtree(temp_dir_save, ignore_errors=True)
                    print("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞.")
                except Exception as e_rmdir:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É {temp_dir_save}: {e_rmdir}")

            self.root.after(0, self.enable_controls, False)

            if not generation_successful:
                 current_status = self.status_label.cget("text") if self.status_label else ""
                 if "–û—à–∏–±–∫–∞" not in current_status and "MP3 –Ω–µ —Å–æ–∑–¥–∞–Ω" not in current_status:
                    self.root.after(0, self.update_status, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MP3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")

    def save_stopped_audio_to_mp3(self):
        if not self.playback_was_stopped or not self.temp_audio_files or not self.current_temp_dir:
            messagebox.showwarning("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", "–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return

        files_to_save = list(self.temp_audio_files)
        temp_dir_to_use = self.current_temp_dir

        default_filename = f"{self.pdf_path.stem}_stopped.mp3" if self.pdf_path else "stopped_audio.mp3"
        output_path_str = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –û–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô MP3 —Ñ–∞–π–ª",
            defaultextension=".mp3",
            filetypes=[("MP3 Files", "*.mp3"), ("All Files", "*.*")],
            initialfile=default_filename
        )
        if not output_path_str:
            return

        output_path = Path(output_path_str)

        self.enable_controls(playback_running=True)
        self.update_status("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –≤ MP3...")
        self.root.update_idletasks()

        save_thread = threading.Thread(
            target=self._run_stopped_save_mp3_thread,
            args=(output_path, files_to_save, temp_dir_to_use),
            daemon=True
        )
        save_thread.start()

    def _run_stopped_save_mp3_thread(self, output_path: Path, files_to_concat: List[Path], temp_dir_path: Path):
        print(f"–ü–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π): –ù–∞—á–∞–ª–æ –¥–ª—è {len(files_to_concat)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {temp_dir_path}, –í—ã—Ö–æ–¥: {output_path}")
        success = False
        error_message = None
        try:
            if not files_to_concat:
                self.root.after(0, self.update_status, "–ù–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                return

            success, error_message = ffmpeg_utils.run_ffmpeg_concat(files_to_concat, output_path, temp_dir_path)

            if success:
                final_message = f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n{output_path}"
                self.root.after(0, messagebox.showinfo, "–£—Å–ø–µ—Ö", final_message)
                self.root.after(0, self.update_status, "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π MP3 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                def _finalize_stopped_save():
                    self.playback_was_stopped = False
                    self.cleanup_temp_files()
                    self.enable_controls(playback_running=False)
                self.root.after(0, _finalize_stopped_save)

            else:
                error_display = error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ FFmpeg."
                self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞ FFmpeg", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ:\n{error_display}")
                self.root.after(0, self.update_status, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ MP3.")

        except Exception as e_stopped_save:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ: {e_stopped_save}")
            import traceback
            traceback.print_exc()
            self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{e_stopped_save}")
            self.root.after(0, self.update_status, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ MP3.")
        finally:
            if not success:
                self.root.after(0, self.enable_controls, False)

    def on_closing(self):
        print("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.stop_audio()

        if self.playing_thread and self.playing_thread.is_alive():
            print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–∑–≤—É—á–∫–∏ (–º–∞–∫—Å 1 —Å–µ–∫)...")
            self.playing_thread.join(timeout=1.0)
            if self.playing_thread.is_alive():
                 print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ—Ç–æ–∫ –æ–∑–≤—É—á–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è.")

        print("–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        self.cleanup_temp_files()

        if self.pdf_document:
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            try:
                self.pdf_document.close()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ PDF: {e}")
            self.pdf_document = None

        print("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ Tkinter...")
        self.root.destroy()
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

    def update_status(self, message: str):
        print(f"Status: {message}")
        if self.status_label and self.status_label.winfo_exists():
            def _update_gui():
                if self.status_label and self.status_label.winfo_exists():
                    self.status_label.config(text=message)
            if self.root and self.root.winfo_exists():
                 self.root.after(0, _update_gui)